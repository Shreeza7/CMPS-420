import * as Errors from "./error.js";
import * as Uploads from "./uploads.js";
import { type Agent } from "./_shims/index.js";
import * as Core from "./core.js";
import * as API from "./resources/index.js";
import * as TopLevelAPI from "./resources/top-level.js";
export interface ClientOptions {
    /**
     * Defaults to process.env['TOGETHER_API_KEY'].
     */
    apiKey?: string | undefined;
    /**
     * Override the default base URL for the API, e.g., "https://api.example.com/v2/"
     *
     * Defaults to process.env['TOGETHER_BASE_URL'].
     */
    baseURL?: string | null | undefined;
    /**
     * The maximum amount of time (in milliseconds) that the client should wait for a response
     * from the server before timing out a single request.
     *
     * Note that request timeouts are retried by default, so in a worst-case scenario you may wait
     * much longer than this timeout before the promise succeeds or fails.
     */
    timeout?: number;
    /**
     * An HTTP agent used to manage HTTP(S) connections.
     *
     * If not provided, an agent will be constructed by default in the Node.js environment,
     * otherwise no agent is used.
     */
    httpAgent?: Agent;
    /**
     * Specify a custom `fetch` function implementation.
     *
     * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is
     * defined globally.
     */
    fetch?: Core.Fetch | undefined;
    /**
     * The maximum number of times that the client will retry a request in case of a
     * temporary failure, like a network error or a 5XX error from the server.
     *
     * @default 5
     */
    maxRetries?: number;
    /**
     * Default headers to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * header to `undefined` or `null` in request options.
     */
    defaultHeaders?: Core.Headers;
    /**
     * Default query parameters to include with every request to the API.
     *
     * These can be removed in individual requests by explicitly setting the
     * param to `undefined` in request options.
     */
    defaultQuery?: Core.DefaultQuery;
}
/**
 * API Client for interfacing with the Together API.
 */
export declare class Together extends Core.APIClient {
    apiKey: string;
    private _options;
    /**
     * API Client for interfacing with the Together API.
     *
     * @param {string | undefined} [opts.apiKey=process.env['TOGETHER_API_KEY'] ?? undefined]
     * @param {string} [opts.baseURL=process.env['TOGETHER_BASE_URL'] ?? https://api.together.xyz/v1] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=5] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL, apiKey, ...opts }?: ClientOptions);
    chat: API.Chat;
    completions: API.Completions;
    embeddings: API.Embeddings;
    files: API.Files;
    fineTune: API.FineTuneResource;
    images: API.Images;
    models: API.Models;
    /**
     * Query a reranker model
     */
    rerank(body: TopLevelAPI.RerankParams, options?: Core.RequestOptions): Core.APIPromise<TopLevelAPI.RerankResponse>;
    protected defaultQuery(): Core.DefaultQuery | undefined;
    protected defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers;
    protected authHeaders(opts: Core.FinalRequestOptions): Core.Headers;
    static Together: typeof Together;
    static DEFAULT_TIMEOUT: number;
    static TogetherError: typeof Errors.TogetherError;
    static APIError: typeof Errors.APIError;
    static APIConnectionError: typeof Errors.APIConnectionError;
    static APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError;
    static APIUserAbortError: typeof Errors.APIUserAbortError;
    static NotFoundError: typeof Errors.NotFoundError;
    static ConflictError: typeof Errors.ConflictError;
    static RateLimitError: typeof Errors.RateLimitError;
    static BadRequestError: typeof Errors.BadRequestError;
    static AuthenticationError: typeof Errors.AuthenticationError;
    static InternalServerError: typeof Errors.InternalServerError;
    static PermissionDeniedError: typeof Errors.PermissionDeniedError;
    static UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
    static toFile: typeof Uploads.toFile;
    static fileFromPath: typeof Uploads.fileFromPath;
}
export declare const TogetherError: typeof Errors.TogetherError, APIError: typeof Errors.APIError, APIConnectionError: typeof Errors.APIConnectionError, APIConnectionTimeoutError: typeof Errors.APIConnectionTimeoutError, APIUserAbortError: typeof Errors.APIUserAbortError, NotFoundError: typeof Errors.NotFoundError, ConflictError: typeof Errors.ConflictError, RateLimitError: typeof Errors.RateLimitError, BadRequestError: typeof Errors.BadRequestError, AuthenticationError: typeof Errors.AuthenticationError, InternalServerError: typeof Errors.InternalServerError, PermissionDeniedError: typeof Errors.PermissionDeniedError, UnprocessableEntityError: typeof Errors.UnprocessableEntityError;
export import toFile = Uploads.toFile;
export import fileFromPath = Uploads.fileFromPath;
export declare namespace Together {
    export import RequestOptions = Core.RequestOptions;
    export import RerankResponse = API.RerankResponse;
    export import RerankParams = API.RerankParams;
    export import Chat = API.Chat;
    export import Completions = API.Completions;
    export import Completion = API.Completion;
    export import LogProbs = API.LogProbs;
    export import ToolChoice = API.ToolChoice;
    export import Tools = API.Tools;
    export import CompletionCreateParams = API.CompletionCreateParams;
    export import CompletionCreateParamsNonStreaming = API.CompletionCreateParamsNonStreaming;
    export import CompletionCreateParamsStreaming = API.CompletionCreateParamsStreaming;
    export import Embeddings = API.Embeddings;
    export import Embedding = API.Embedding;
    export import EmbeddingCreateParams = API.EmbeddingCreateParams;
    export import Files = API.Files;
    export import FileObject = API.FileObject;
    export import FileRetrieveResponse = API.FileRetrieveResponse;
    export import FileListResponse = API.FileListResponse;
    export import FileDeleteResponse = API.FileDeleteResponse;
    export import FineTuneResource = API.FineTuneResource;
    export import FineTune = API.FineTune;
    export import FineTuneEvent = API.FineTuneEvent;
    export import FineTuneListResponse = API.FineTuneListResponse;
    export import FineTuneDownloadResponse = API.FineTuneDownloadResponse;
    export import FineTuneCreateParams = API.FineTuneCreateParams;
    export import FineTuneDownloadParams = API.FineTuneDownloadParams;
    export import Images = API.Images;
    export import ImageFile = API.ImageFile;
    export import ImageCreateParams = API.ImageCreateParams;
    export import Models = API.Models;
    export import ModelListResponse = API.ModelListResponse;
}
export default Together;
//# sourceMappingURL=index.d.ts.map